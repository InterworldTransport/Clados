/*
 * <h2>Copyright</h2> Â© 2021 Alfred Differ<br>
 * ------------------------------------------------------------------------ <br>
 * ---org.interworldtransport.cladosG.CliffordProduct<br>
 * -------------------------------------------------------------------- <p>
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.<p>
 * 
 * Use of this code or executable objects derived from it by the Licensee 
 * states their willingness to accept the terms of the license. <p> 
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.<p> 
 * 
 * ------------------------------------------------------------------------ <br>
 * ---org.interworldtransport.cladosG.CliffordProduct<br>
 * ------------------------------------------------------------------------ <br>
 */
package org.interworldtransport.cladosG;

/**
 * This interface represents the 'contract' obeyed by a geometric product in
 * cladosG. Most of the interface focuses upon gettor methods that return pieces
 * of a product table, but there are a few convenience methods too that support
 * grade information and ranges within the underlying basis. Finally there are
 * also a few methods for dealing with signature strings and XML output.
 * <p>
 * The farther one gets from basic methods delivering 'results' and 'signs', the
 * more one is wandering off into conveniences.
 * <p>
 * @version 2.0
 * @author Dr Alfred W Differ
 */
public interface CliffordProduct {

	/**
	 * Return a measure of the validity of the Signature string. A string with +'s
	 * and -'s will pass. No other one does.
	 * <p>
	 * This method also establishes the internal integer representation of the
	 * signature.
	 * <p>
	 * @param pSg String
	 * @return boolean This boolean states whether the GProduct signature is valid.
	 */
	public static boolean validateSignature(String pSg) {
		if (pSg == null)
			return false; // Nothing to test
		else if (!CanonicalBasis.validateSize((byte) pSg.length()))
			return false;
		else if (pSg.length() == 0)
			return true; // Empty list IS allowed
		else
			for (char j : pSg.toCharArray())
				switch (j) {
				case '+' -> {
					continue;
				}
				case '-' -> {
					continue;
				}
//				case '0' -> {
//					continue;
//				}
				default -> {
					return false;
				}
				}
		return true; // nothing bad detected
	}

	/**
	 * Return a measure of whether blades pj and pk anticommute. Return a 1 if they
	 * anticommute. Return a 0 otherwise.
	 * <p>
	 * @param pRow int
	 * @param pCol int
	 * @return int
	 */
	public abstract int getACommuteSign(int pRow, int pCol);

	/**
	 * Basic Get method for the Basis generated by the signature of this GProduct.
	 * <p>
	 * @return Basis
	 */
	public abstract CanonicalBasis getBasis();

	/**
	 * Get the linear dimension of the vector space that uses the associated Basis.
	 * <p>
	 * @return int
	 */
	public abstract int getBladeCount();

	/**
	 * Return a measure of whether blades pj and pk commute. Return a 1 if they
	 * commute. Return a 0 otherwise.
	 * <p>
	 * @param pRow int
	 * @param pCol int
	 * @return int
	 */
	public abstract int getCommuteSign(int pRow, int pCol);

	/**
	 * Get the grade count of the algebra that uses this GProduct.
	 * <p>
	 * @return byte
	 */
	public abstract byte getGradeCount();

	/**
	 * Get start and end index from the GradeRange array for grade pGrade.
	 * <p>
	 * @param pGrade short primitive = grade for which the range is needed
	 * @return int[] start and end indexes returned for particular grade
	 */
	public abstract int[] getGradeRange(byte pGrade);

	/**
	 * Get start and end index from the GradeRange array for the highest grade. Both
	 * indexes will be the same.
	 * <p>
	 * @return int[] start and end indexes returned highest grade
	 */
	public abstract int[] getPScalarRange();

	/**
	 * Return an element in the geometric multiplication result table. The value
	 * will match to within a sign the index of a blade in the underlying basis.
	 * <p>
	 * @param pRow integer index of the Left/Row blade in a product.
	 * @param pCol integer index of the Right/Column blade in a product.
	 * @return integer index of a blade in the underlying basis that is the product
	 *         of to two blades implied by the indexes passed in.
	 */
	public abstract int getResult(int pRow, int pCol);

	/**
	 * Return the sign of an element in the geometric multiplication result table.
	 * <p>
	 * @param pRow integer index of the Left/Row blade in a product.
	 * @param pCol integer index of the Right/Column blade in a product.
	 * @return integer of +1 or -1 depending on the sign of the product table cell.
	 */
	public abstract int getSign(int pRow, int pCol);

	/**
	 * Return the signature of the generator geometry. This lists the squares of the
	 * generators in their numeric order.
	 * <p>
	 * @return String
	 */
	public abstract String signature();

	/**
	 * This method produces a printable and parseable string that represents the
	 * Product in a human readable form.
	 * <p>
	 * @param indent String of tab characters (most likely) to help make output more
	 *               readable to human eyes.
	 * @return String This is the XML string export of an object.
	 */
	public abstract String toXMLString(String indent);
}
